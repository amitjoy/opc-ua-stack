#* @vtlvariable name="enumeratedType" type="com.inductiveautomation.opcua.stack.codegen.EnumeratedType" *#

package com.inductiveautomation.opcua.stack.core.types.enumerated;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableMap.Builder;
import com.inductiveautomation.opcua.stack.core.Identifiers;
import com.inductiveautomation.opcua.stack.core.serialization.*;
import com.inductiveautomation.opcua.stack.core.types.builtin.*;

public enum ${enumeratedType.name} implements UaEnumeration {

#foreach($field in ${enumeratedType.fields})
    ${field.name}(${field.value})#if($foreach.hasNext),
#else; #end
#end


    private final int value;

    private ${enumeratedType.name}(int value) {
        this.value = value;
    }

    @Override
    public int getValue() {
        return value;
    }

    private static final ImmutableMap<Integer, ${enumeratedType.name}> VALUES;
    static {
        Builder<Integer, ${enumeratedType.name}> builder = ImmutableMap.builder();
        for (${enumeratedType.name} e : values()) {
            builder.put(e.getValue(), e);
        }
        VALUES = builder.build();
    }

    public static ${enumeratedType.name} from(Integer value) {
        if (value == null) return null;
        return VALUES.getOrDefault(value, null);
    }

	public static void encode(${enumeratedType.name} ${enumeratedType.javaName}, UaEncoder encoder) {
		encoder.encodeInt32(null, ${enumeratedType.javaName}.getValue());
	}

	public static ${enumeratedType.name} decode(UaDecoder decoder) {
        int value = decoder.decodeInt32(null);

        return VALUES.getOrDefault(value, null);
	}

	static {
		DelegateRegistry.registerEncoder(${enumeratedType.name}::encode, ${enumeratedType.name}.class);
		DelegateRegistry.registerDecoder(${enumeratedType.name}::decode, ${enumeratedType.name}.class);
	}

}
